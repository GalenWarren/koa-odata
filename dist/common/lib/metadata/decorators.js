"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.entity = entity;
exports.property = property;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _model = require("./model");

var _entity = require("./entity");

var _property = require("./property");

var entityMetadata = Symbol();
exports.entityMetadata = entityMetadata;
var propertiesMetadata = Symbol();

exports.propertiesMetadata = propertiesMetadata;

function entity() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (constructor) {
    if (_lodash2["default"].isString(options)) {
      options = {
        name: options
      };
    }

    options = _lodash2["default"].defaults({}, options || {}, {
      name: constructor.name,
      model: "default"
    });

    var model = _model.ModelMetadata.getOrCreate(options.model);

    var properties = constructor.prototype[propertiesMetadata] || [];
    delete constructor.prototype[propertiesMetadata];

    var entity = new _entity.EntityMetadata({ name: options.name, model: model, properties: properties });
    model.entities[entity.collectionName] = entity;

    constructor[entityMetadata] = entity;
  };
}

function property() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (prototype, name, descriptor) {
    if (_lodash2["default"].isString(options)) {
      options = {
        name: options
      };
    }

    options = _lodash2["default"].defaults({}, options || {}, {
      name: name
    });

    var properties = prototype[propertiesMetadata];
    if (!properties) {
      properties = prototype[propertiesMetadata] = [];
    }

    var property = new _property.PropertyMetadata({ name: options.name });
    properties.push(property);
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tZXRhZGF0YS9kZWNvcmF0b3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztxQkFDTSxTQUFTOztzQkFDUixVQUFVOzt3QkFDUixZQUFZOztBQUtwQyxJQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsQ0FBQzs7QUFDaEMsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLEVBQUUsQ0FBQzs7OztBQUtwQyxTQUFTLE1BQU0sR0FBaUI7TUFBZixPQUFPLHlEQUFHLEVBQUU7O0FBRWxDLFNBQU8sVUFBVSxXQUFXLEVBQUc7QUFHN0IsUUFBSSxvQkFBRSxRQUFRLENBQUUsT0FBTyxDQUFFLEVBQUU7QUFDekIsYUFBTyxHQUFHO0FBQ1IsWUFBSSxFQUFFLE9BQU87T0FDZCxDQUFBO0tBQ0Y7O0FBR0QsV0FBTyxHQUFHLG9CQUFFLFFBQVEsQ0FBRSxFQUFFLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRTtBQUN2QyxVQUFJLEVBQUUsV0FBVyxDQUFDLElBQUk7QUFDdEIsV0FBSyxFQUFFLFNBQVM7S0FDakIsQ0FBQyxDQUFDOztBQUdILFFBQU0sS0FBSyxHQUFHLHFCQUFjLFdBQVcsQ0FBRSxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUM7O0FBSXpELFFBQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkUsV0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7O0FBR2pELFFBQU0sTUFBTSxHQUFHLDJCQUFtQixFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDaEcsU0FBSyxDQUFDLFFBQVEsQ0FBRSxNQUFNLENBQUMsY0FBYyxDQUFFLEdBQUcsTUFBTSxDQUFDOztBQUdqRCxlQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDO0dBRXRDLENBQUE7Q0FFRjs7QUFLTSxTQUFTLFFBQVEsR0FBa0I7TUFBaEIsT0FBTyx5REFBSSxFQUFFOztBQUVyQyxTQUFPLFVBQVUsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUc7QUFHN0MsUUFBSSxvQkFBRSxRQUFRLENBQUUsT0FBTyxDQUFFLEVBQUU7QUFDekIsYUFBTyxHQUFHO0FBQ1IsWUFBSSxFQUFFLE9BQU87T0FDZCxDQUFBO0tBQ0Y7O0FBR0QsV0FBTyxHQUFHLG9CQUFFLFFBQVEsQ0FBRSxFQUFFLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRTtBQUN2QyxVQUFJLEVBQUUsSUFBSTtLQUNYLENBQUMsQ0FBQzs7QUFHSCxRQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMvQyxRQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsZ0JBQVUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDakQ7O0FBR0QsUUFBTSxRQUFRLEdBQUcsK0JBQXFCLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELGNBQVUsQ0FBQyxJQUFJLENBQUUsUUFBUSxDQUFFLENBQUM7R0FFN0IsQ0FBQTtDQUVGIiwiZmlsZSI6ImxpYi9tZXRhZGF0YS9kZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHtNb2RlbE1ldGFkYXRhfSBmcm9tIFwiLi9tb2RlbFwiO1xuaW1wb3J0IHtFbnRpdHlNZXRhZGF0YX0gZnJvbSBcIi4vZW50aXR5XCI7XG5pbXBvcnQge1Byb3BlcnR5TWV0YWRhdGF9IGZyb20gXCIuL3Byb3BlcnR5XCI7XG5cbi8qKlxuKiBTeW1ib2xzIHVzZWQgdG8gYXR0YWNoIG1ldGFkYXRhXG4qL1xuZXhwb3J0IGNvbnN0IGVudGl0eU1ldGFkYXRhID0gU3ltYm9sKCk7XG5leHBvcnQgY29uc3QgcHJvcGVydGllc01ldGFkYXRhID0gU3ltYm9sKCk7XG5cbi8qKlxuKiBEZWNvcmF0b3IgdGhhdCBkZXNpZ25hdGVzIGFuIGVudGl0eSB0eXBlXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGVudGl0eSggb3B0aW9ucyA9IHt9ICkge1xuXG4gIHJldHVybiBmdW5jdGlvbiggY29uc3RydWN0b3IgKSB7XG5cbiAgICAvLyBpZiBzdHJpbmcgcGFzc2VkIGluLCB0aGlzIGlzIHRoZSBuYW1lXG4gICAgaWYgKF8uaXNTdHJpbmcoIG9wdGlvbnMgKSkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbmFtZTogb3B0aW9uc1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFzc2lnbiBkZWZhdWx0c1xuICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKCB7fSwgb3B0aW9ucyB8fCB7fSwge1xuICAgICAgbmFtZTogY29uc3RydWN0b3IubmFtZSxcbiAgICAgIG1vZGVsOiBcImRlZmF1bHRcIlxuICAgIH0pO1xuXG4gICAgLy8gYWNjZXNzIHRoZSBtb2RlbCBvYmplY3RcbiAgICBjb25zdCBtb2RlbCA9IE1vZGVsTWV0YWRhdGEuZ2V0T3JDcmVhdGUoIG9wdGlvbnMubW9kZWwgKTtcblxuICAgIC8vIGZpbmQgYW55IGRpc2NvdmVyZWQgcHJvcGVydGllcyAodGhlIHByb3BlcnkgZGVjb3JhdG9ycyBydW4gZmlyc3QsXG4gICAgLy8gc28gdGhleSB0ZW1wb3JhcmlseSBzdG9yZSBwcm9wZXJ0aWVzIGhlcmUpXG4gICAgY29uc3QgcHJvcGVydGllcyA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZVtwcm9wZXJ0aWVzTWV0YWRhdGFdIHx8IFtdO1xuICAgIGRlbGV0ZSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbcHJvcGVydGllc01ldGFkYXRhXTtcblxuICAgIC8vIGNyZWF0ZSB0aGUgZW50aXR5IG9iamVjdCBhbmQgYWRkIHRvIG1vZGVsJ3MgZW50aXRpZXNcbiAgICBjb25zdCBlbnRpdHkgPSBuZXcgRW50aXR5TWV0YWRhdGEoeyBuYW1lOiBvcHRpb25zLm5hbWUsIG1vZGVsOiBtb2RlbCwgcHJvcGVydGllczogcHJvcGVydGllcyB9KTtcbiAgICBtb2RlbC5lbnRpdGllc1sgZW50aXR5LmNvbGxlY3Rpb25OYW1lIF0gPSBlbnRpdHk7XG5cbiAgICAvLyBzdG9yZSB0aGUgbWV0YWRhdGEgb24gdGhlIGNvbnN0cnVjdG9yIHNvIHdlIGNhbiBmaW5kIGl0IGxhdGVyXG4gICAgY29uc3RydWN0b3JbZW50aXR5TWV0YWRhdGFdID0gZW50aXR5O1xuXG4gIH1cblxufVxuXG4vKipcbiogRGVjb3JhdG9yIHRoYXQgZGVzaWduYXRlcyBhIHByb3BlcnR5XG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5KCBvcHRpb25zID0gIHt9ICkge1xuXG4gIHJldHVybiBmdW5jdGlvbiggcHJvdG90eXBlLCBuYW1lLCBkZXNjcmlwdG9yICkge1xuXG4gICAgLy8gaWYgc3RyaW5nIHBhc3NlZCBpbiwgdGhpcyBpcyB0aGUgbmFtZVxuICAgIGlmIChfLmlzU3RyaW5nKCBvcHRpb25zICkpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIG5hbWU6IG9wdGlvbnNcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhc3NpZ24gZGVmYXVsdHNcbiAgICBvcHRpb25zID0gXy5kZWZhdWx0cygge30sIG9wdGlvbnMgfHwge30sIHtcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9KTtcblxuICAgIC8vIGFjY2VzcyB0aGUgcHJvcGVydHkgbWV0YWRhdGFcbiAgICBsZXQgcHJvcGVydGllcyA9IHByb3RvdHlwZVtwcm9wZXJ0aWVzTWV0YWRhdGFdO1xuICAgIGlmICghcHJvcGVydGllcykge1xuICAgICAgcHJvcGVydGllcyA9IHByb3RvdHlwZVtwcm9wZXJ0aWVzTWV0YWRhdGFdID0gW107XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIHRoZSBwcm9wZXJ0eSBvYmplY3QgYW5kIGFkZCB0byBjb2xsZWN0aW9uXG4gICAgY29uc3QgcHJvcGVydHkgPSBuZXcgUHJvcGVydHlNZXRhZGF0YSh7IG5hbWU6IG9wdGlvbnMubmFtZSB9KTtcbiAgICBwcm9wZXJ0aWVzLnB1c2goIHByb3BlcnR5ICk7XG5cbiAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
