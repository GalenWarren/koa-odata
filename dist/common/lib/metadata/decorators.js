"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.entity = entity;
exports.property = property;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _model = require("./model");

var _entity = require("./entity");

var _property = require("./property");

var entityMetadata = Symbol();
exports.entityMetadata = entityMetadata;
var propertiesMetadata = Symbol();

exports.propertiesMetadata = propertiesMetadata;

function entity() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (constructor) {
    if (_lodash2["default"].isString(options)) {
      options = {
        name: options
      };
    }

    options = _lodash2["default"].defaults({}, options || {}, {
      name: constructor.name,
      model: "default"
    });

    var model = _model.ModelMetadata.getOrCreate(options.model);

    var properties = constructor.prototype[propertiesMetadata] || [];
    delete constructor.prototype[propertiesMetadata];

    var entity = new _entity.EntityMetadata({ name: options.name, model: model, properties: properties });
    model.entities[entity.collectionName] = entity;

    constructor[entityMetadata] = entity;
  };
}

function property() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (prototype, name, descriptor) {
    if (_lodash2["default"].isString(options)) {
      options = {
        name: options
      };
    }

    options = _lodash2["default"].defaults({}, options || {}, {
      name: name
    });

    var properties = prototype[propertiesMetadata];
    if (!properties) {
      properties = prototype[propertiesMetadata] = [];
    }

    var property = new _property.PropertyMetadata({ name: options.name });
    properties.push(property);
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tZXRhZGF0YS9kZWNvcmF0b3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztxQkFDTSxTQUFTOztzQkFDUixVQUFVOzt3QkFDUixZQUFZOztBQUtwQyxJQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsQ0FBQzs7QUFDaEMsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLEVBQUUsQ0FBQzs7OztBQUtwQyxTQUFTLE1BQU0sR0FBaUI7TUFBZixPQUFPLHlEQUFHLEVBQUU7O0FBRWxDLFNBQU8sVUFBVSxXQUFXLEVBQUc7QUFHN0IsUUFBSSxvQkFBRSxRQUFRLENBQUUsT0FBTyxDQUFFLEVBQUU7QUFDekIsYUFBTyxHQUFHO0FBQ1IsWUFBSSxFQUFFLE9BQU87T0FDZCxDQUFBO0tBQ0Y7O0FBR0QsV0FBTyxHQUFHLG9CQUFFLFFBQVEsQ0FBRSxFQUFFLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRTtBQUN2QyxVQUFJLEVBQUUsV0FBVyxDQUFDLElBQUk7QUFDdEIsV0FBSyxFQUFFLFNBQVM7S0FDakIsQ0FBQyxDQUFDOztBQUdILFFBQU0sS0FBSyxHQUFHLHFCQUFjLFdBQVcsQ0FBRSxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUM7O0FBSXpELFFBQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkUsV0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7O0FBR2pELFFBQU0sTUFBTSxHQUFHLDJCQUFtQixFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDaEcsU0FBSyxDQUFDLFFBQVEsQ0FBRSxNQUFNLENBQUMsY0FBYyxDQUFFLEdBQUcsTUFBTSxDQUFDOztBQUdqRCxlQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDO0dBRXRDLENBQUE7Q0FFRjs7QUFLTSxTQUFTLFFBQVEsR0FBa0I7TUFBaEIsT0FBTyx5REFBSSxFQUFFOztBQUVyQyxTQUFPLFVBQVUsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUc7QUFHN0MsUUFBSSxvQkFBRSxRQUFRLENBQUUsT0FBTyxDQUFFLEVBQUU7QUFDekIsYUFBTyxHQUFHO0FBQ1IsWUFBSSxFQUFFLE9BQU87T0FDZCxDQUFBO0tBQ0Y7O0FBR0QsV0FBTyxHQUFHLG9CQUFFLFFBQVEsQ0FBRSxFQUFFLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRTtBQUN2QyxVQUFJLEVBQUUsSUFBSTtLQUNYLENBQUMsQ0FBQzs7QUFHSCxRQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMvQyxRQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsZ0JBQVUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDakQ7O0FBR0QsUUFBTSxRQUFRLEdBQUcsK0JBQXFCLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELGNBQVUsQ0FBQyxJQUFJLENBQUUsUUFBUSxDQUFFLENBQUM7R0FFN0IsQ0FBQTtDQUVGIiwiZmlsZSI6ImxpYi9tZXRhZGF0YS9kZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQge01vZGVsTWV0YWRhdGF9IGZyb20gXCIuL21vZGVsXCI7XHJcbmltcG9ydCB7RW50aXR5TWV0YWRhdGF9IGZyb20gXCIuL2VudGl0eVwiO1xyXG5pbXBvcnQge1Byb3BlcnR5TWV0YWRhdGF9IGZyb20gXCIuL3Byb3BlcnR5XCI7XHJcblxyXG4vKipcclxuKiBTeW1ib2xzIHVzZWQgdG8gYXR0YWNoIG1ldGFkYXRhXHJcbiovXHJcbmV4cG9ydCBjb25zdCBlbnRpdHlNZXRhZGF0YSA9IFN5bWJvbCgpO1xyXG5leHBvcnQgY29uc3QgcHJvcGVydGllc01ldGFkYXRhID0gU3ltYm9sKCk7XHJcblxyXG4vKipcclxuKiBEZWNvcmF0b3IgdGhhdCBkZXNpZ25hdGVzIGFuIGVudGl0eSB0eXBlXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHkoIG9wdGlvbnMgPSB7fSApIHtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCBjb25zdHJ1Y3RvciApIHtcclxuXHJcbiAgICAvLyBpZiBzdHJpbmcgcGFzc2VkIGluLCB0aGlzIGlzIHRoZSBuYW1lXHJcbiAgICBpZiAoXy5pc1N0cmluZyggb3B0aW9ucyApKSB7XHJcbiAgICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgbmFtZTogb3B0aW9uc1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYXNzaWduIGRlZmF1bHRzXHJcbiAgICBvcHRpb25zID0gXy5kZWZhdWx0cygge30sIG9wdGlvbnMgfHwge30sIHtcclxuICAgICAgbmFtZTogY29uc3RydWN0b3IubmFtZSxcclxuICAgICAgbW9kZWw6IFwiZGVmYXVsdFwiXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBhY2Nlc3MgdGhlIG1vZGVsIG9iamVjdFxyXG4gICAgY29uc3QgbW9kZWwgPSBNb2RlbE1ldGFkYXRhLmdldE9yQ3JlYXRlKCBvcHRpb25zLm1vZGVsICk7XHJcblxyXG4gICAgLy8gZmluZCBhbnkgZGlzY292ZXJlZCBwcm9wZXJ0aWVzICh0aGUgcHJvcGVyeSBkZWNvcmF0b3JzIHJ1biBmaXJzdCxcclxuICAgIC8vIHNvIHRoZXkgdGVtcG9yYXJpbHkgc3RvcmUgcHJvcGVydGllcyBoZXJlKVxyXG4gICAgY29uc3QgcHJvcGVydGllcyA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZVtwcm9wZXJ0aWVzTWV0YWRhdGFdIHx8IFtdO1xyXG4gICAgZGVsZXRlIGNvbnN0cnVjdG9yLnByb3RvdHlwZVtwcm9wZXJ0aWVzTWV0YWRhdGFdO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgZW50aXR5IG9iamVjdCBhbmQgYWRkIHRvIG1vZGVsJ3MgZW50aXRpZXNcclxuICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHlNZXRhZGF0YSh7IG5hbWU6IG9wdGlvbnMubmFtZSwgbW9kZWw6IG1vZGVsLCBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIH0pO1xyXG4gICAgbW9kZWwuZW50aXRpZXNbIGVudGl0eS5jb2xsZWN0aW9uTmFtZSBdID0gZW50aXR5O1xyXG5cclxuICAgIC8vIHN0b3JlIHRoZSBtZXRhZGF0YSBvbiB0aGUgY29uc3RydWN0b3Igc28gd2UgY2FuIGZpbmQgaXQgbGF0ZXJcclxuICAgIGNvbnN0cnVjdG9yW2VudGl0eU1ldGFkYXRhXSA9IGVudGl0eTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiogRGVjb3JhdG9yIHRoYXQgZGVzaWduYXRlcyBhIHByb3BlcnR5XHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBwcm9wZXJ0eSggb3B0aW9ucyA9ICB7fSApIHtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCBwcm90b3R5cGUsIG5hbWUsIGRlc2NyaXB0b3IgKSB7XHJcblxyXG4gICAgLy8gaWYgc3RyaW5nIHBhc3NlZCBpbiwgdGhpcyBpcyB0aGUgbmFtZVxyXG4gICAgaWYgKF8uaXNTdHJpbmcoIG9wdGlvbnMgKSkge1xyXG4gICAgICBvcHRpb25zID0ge1xyXG4gICAgICAgIG5hbWU6IG9wdGlvbnNcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGFzc2lnbiBkZWZhdWx0c1xyXG4gICAgb3B0aW9ucyA9IF8uZGVmYXVsdHMoIHt9LCBvcHRpb25zIHx8IHt9LCB7XHJcbiAgICAgIG5hbWU6IG5hbWVcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGFjY2VzcyB0aGUgcHJvcGVydHkgbWV0YWRhdGFcclxuICAgIGxldCBwcm9wZXJ0aWVzID0gcHJvdG90eXBlW3Byb3BlcnRpZXNNZXRhZGF0YV07XHJcbiAgICBpZiAoIXByb3BlcnRpZXMpIHtcclxuICAgICAgcHJvcGVydGllcyA9IHByb3RvdHlwZVtwcm9wZXJ0aWVzTWV0YWRhdGFdID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBwcm9wZXJ0eSBvYmplY3QgYW5kIGFkZCB0byBjb2xsZWN0aW9uXHJcbiAgICBjb25zdCBwcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eU1ldGFkYXRhKHsgbmFtZTogb3B0aW9ucy5uYW1lIH0pO1xyXG4gICAgcHJvcGVydGllcy5wdXNoKCBwcm9wZXJ0eSApO1xyXG5cclxuICB9XHJcblxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
